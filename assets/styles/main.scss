
$side: 3;
$radius: 550;
$steps: 32;
$arc: 360 / $steps;
$rows: 4;
$cols: 8;

$hip: sqrt( pow($side, 2) + pow($side, 2) );

$body-color: #4c4f58;
$default-color: #5DB75D;

$gtac: yellow, green, red, blue;


*{
    box-sizing: border-box;
}

body{
    position: relative;
    perspective: 0;
    perspective-origin: 50% 50%;
    height: 100vh;
    margin: 0;
    padding: 0;
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    font-size: 17px;
    line-height: 1.4;
    color: $body-color;
    background-color: #fbfbfb;
}

/*
    Typography
 */

a{
    color: $default-color;
}

p{
    transition: all 300ms;

    &::before{
        transition: all 300ms;
    }
}

.top{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 68px;
    z-index: 100;

    background-color: white;
    background-color: rgba(255, 255, 255, .8);
    border-bottom: 1px solid #eaeaea;

    display: none;
}

small{
    font-size: 80%;
}

h1{
    font-size: 100px;
    line-height: .6;
    margin: 0;
    font-family: "Times New Roman", Times;
    font-style: italic;
    font-weight: 100;
    letter-spacing: -7px;
    text-shadow: 0 0 30px rgba(255,255,255,0.8);
    display: inline-block;
    margin-bottom: 7px;
    
    &::after {
        content: "";
        display: block;
        width: 100%;
        height: 15px;
        background-color: rgba($default-color, 0.68);
        z-index: 1000;
        position: relative;
        left: .2em;
    }
}

.subline{
    margin-left: 20px;
    display: inline-block;
}

h2{
    margin-top: 0;
    margin-bottom: 1rem;
}


/*
    Navigation
 */

input{
    display: none;
}

input[type="radio"] + .nav-item{
    position:relative;
    z-index: 110;
    display: none;
    line-height: 1;
    font-weight: bold;
    padding: 25px 15px;
    border-right: 1px solid #eaeaea;
    cursor: pointer;
    transition: all 250ms;
    display: none;

    .nav-item-description{
        margin-left: 10px;

        font-weight: normal;
        font-style: italic;
        color:#868686;
        //transition: all 250ms;
    }

    &:first-of-type{
        background-color: $body-color;
        color: white;

        &:hover{
            background-color: $default-color;
        }
    }
}

input[type="radio"]:checked + .nav-item{
    background-color: $default-color;
    color: white;
    .nav-item-description{
        color:white;
    }
}

/*
    Content
 */

main{
    position: relative;
    display: block; //IE
    min-height: 100vh;
}

article{
    position: relative;
    margin-top: 50px;
    padding-bottom: 60px;

}

header,
.content>section{
    padding: 20px;
    width: 100%;
}

.jump-right,
.jump-left{
    display: none;
}

footer{
    position: absolute;
    bottom: 0;
    width: 100%;
    padding: 10px;
    background-color: white;
    border-top: 1px solid #f2f2f2;
    text-align: center;
}


/**
 *  HERE STARTS THE MAGIC!
 */

// Crops the .c below to the screen size
.scene{
    position: absolute;
    top:0;
    right: 0;
    bottom: 0;
    left: 0;
    overflow: hidden;
    display: none;
}

//container
//sets the initail rotations of the whole composition
.c{
    position: absolute;
    width: 0;
    height: 0;
    top: 20%;
    left: 70%;
    transform: rotateZ(-25deg) rotateX(-15deg) rotateY(-15deg) translate3d(-50%, -50%, 600px) ;

    perspective: 800px;
    perspective-origin: 50% 50%;
    transform-style: preserve-3d;
}

// group wrapper.
// the one rotating
.w{
    width: 0;
    height: 0;
    transform-style: preserve-3d;
    transform-origin: 50% 50%;
    animation: rotateGroups 60s infinite linear;
}

//DNA
.g{
    transform-style: preserve-3d;
    transform-origin: 50% 50%;
    transition: all 1000ms ease-in-out;
    
    //scattered positions to save on size
    //we create eight containers holding each 32 triangles
    @for $k from 1 through 8{
        $randomRotation: random(360);
        $flip: 0deg;

        @if $k % 2 == 0 {
            $flip: 180deg;
        }
        
        //So the traingles look placed randomly
        //we rotate and flip each one of these containers 
        &:nth-child(#{$k}){
            transform: rotateX($flip) rotateY(#{$randomRotation}deg);
        }
    }
    
    // Triangle
    p{
        position: absolute;
        top: 0;
        left: 0;
        transform: translate3d(0, 0, 0);

        display: block;
        margin: 0;
        padding: 0;

        width: $side * 1vw;
        height: $side * 1vw;

        /* arctan(50 / 50) = 44.99999997734deg 
        * ??? need to skew by 90deg - 34.01935deg = 55.98065deg ???
        */
        
        transform: skewX(-44.99999997734deg);
        transform-origin: 100% 0;
        overflow: hidden;
        transition: all 2000ms; 

        &::before{
            content: "";
            position: absolute; 
            top: 0;
            left: 0;
            display: block;
            width: $side * 1vw;
            height: $side * 1vw;

            transform: skewX(44.99999997734deg);
            transform-origin: inherit;

            background: #e3e3e3;
            background: -moz-linear-gradient(top, rgba(227,227,227,1) 0%, rgba(214,214,214,1) 100%);
            background: -webkit-gradient(left top, left bottom, color-stop(0%, rgba(227,227,227,1)), color-stop(100%, rgba(214,214,214,1)));
            background: -webkit-linear-gradient(top, rgba(227,227,227,1) 0%, rgba(214,214,214,1) 100%);
            background: -o-linear-gradient(top, rgba(227,227,227,1) 0%, rgba(214,214,214,1) 100%);
            background: -ms-linear-gradient(top, rgba(227,227,227,1) 0%, rgba(214,214,214,1) 100%);
            background: linear-gradient(to bottom, rgba(227,227,227,1) 0%, rgba(214,214,214,1) 100%);
            
            cursor: pointer;
            transition: all 300ms;
        }
    }
    

    //each one of the 32 triangles have a certain random position
    $p: 0;

    $rangeMax: $radius + $radius * .2;
    $rangeMin: $radius - $radius * .2;

    @for $s from 1 through $rows{
        @for $t from 1 through $cols{
            $p : $p + 1;

            $x: sin($arc * $p) * ( random($rangeMax - $rangeMin) + $rangeMin ) * 1px;
            $y: (random(200) - 100) * 1px;
            $z: cos($arc * $p) * ( random($rangeMax - $rangeMin) + $rangeMin ) * 1px;

            $angle:  random(360) * 1deg;
            $rx:     (random(20) - 10) / 10;
            $ry:     (random(20) - 10) / 10;
            $rz:     (random(20) - 10) / 10;

            p:nth-child(#{$p}){
                transform: translate3d($x, $y, $z) rotate3d($rx, $ry, $rz, $angle);
            }
        }
    }
}

//shift first half to the top
input[type="radio"]:nth-of-type(2):checked ~ .scene .g:nth-child(1){
    transform: translateY( -#{$hip * 8 * 1vw} ) rotateY(0deg);
}

input[type="radio"]:nth-of-type(2):checked ~ .scene .g:nth-child(3){
    transform: translateY(0) rotateY(0deg);
}

//separate both parts
input[type="radio"]:nth-of-type(3):checked ~ .scene .g:nth-child(1){
    transform: translateY( -#{$hip * 12  * 1vw} ) rotateY(0deg);
}

input[type="radio"]:nth-of-type(3):checked ~ .scene .g:nth-child(3){
    transform: translateY( #{$hip * 4  * 1vw} ) rotateY(0deg);
}

//insert new part on dna
input[type="radio"]:nth-of-type(4):checked ~ .scene .g:nth-child(1){
    transform: translateY( -#{$hip * 12  * 1vw} ) rotateY(0deg);
}

input[type="radio"]:nth-of-type(4):checked ~ .scene .g:nth-child(3){
    transform: translateY( #{$hip * 4  * 1vw} ) rotateY(0deg);
}

input[type="radio"]:nth-of-type(4):checked ~ .scene .g:nth-child(5){
    transform: translateY( -#{$hip * 4  * 1vw} ) rotateY(0deg);
}

// first stage
input[type="radio"]:nth-of-type(2):checked ~ .scene .g:nth-child(1),
input[type="radio"]:nth-of-type(2):checked ~ .scene .g:nth-child(3),
// second stage
input[type="radio"]:nth-of-type(3):checked ~ .scene .g:nth-child(1),
input[type="radio"]:nth-of-type(3):checked ~ .scene .g:nth-child(3),
// third stage
input[type="radio"]:nth-of-type(4):checked ~ .scene .g:nth-child(1),
input[type="radio"]:nth-of-type(4):checked ~ .scene .g:nth-child(3),
input[type="radio"]:nth-of-type(4):checked ~ .scene .g:nth-child(5){

    // @for $j from 0 through ($steps/4) - 1{
    //     $j: $j * 4; //increment in 4 steps

    //     $rotateZ: 45deg;
    //     $translateX: $hip/2 * 1vw;
    //     $translateY: $translateY + $hip;
        
    //     p:nth-child(#{$j+1}){

    //         transform: translate3d(-$translateX, $translateY, 0) rotateZ(45deg);
    //     }

    //     p:nth-child(#{$j+2}){
    //         transform: translate3d($translateX, $translateY, 0) rotateZ(-135deg);
    //     }

    //     p:nth-child(#{$j+3}){
    //         transform: translate3d(-$translateX*2, $translateY + $hip/2, 0) rotateZ(45deg) scaleX(-1) scaleY(-1);
    //     }

    //     p:nth-child(#{$j+4}){
    //         transform: translate3d($translateX*2, $translateY + $hip/2, 0) rotateZ(-135deg) scaleX(-1) scaleY(-1);
    //     }

    // }
    
    $stpd: 360 / 32;
    $stp: $stpd * pi() / 180;

    $r: $hip*2 * 1vw;
    $translateY: 0;

    $incrementY: $hip/2;
    $rotateZ: 3deg;//45deg;

    @for $l from 1 through $steps/2 + 1{
        
        
        

        $x: sin( $stp * $l ) * $r;
        $z: cos( $stp * $l ) * $r;

        // @if $l % 2 == 0 {
        //     $rotateZ: 5deg;
        // }
        // @else {
        //     $rotateZ: 185deg;
        // }
        
        p:nth-child(#{$l}){

            transform: none;

            $angleY: ( $l * $stpd ) * 1deg;
            
            transform: translate3d($x, $translateY * 1vw, $z) rotateY( $angleY ) rotateZ( $rotateZ ) ;
            
            $color: nth( $gtac, floor( random(4) ) );
            
            &::before{
                background: $color;
            }
        }
        
        $translateY: $translateY + $incrementY;
    }   
    
    $translateY: 0;
    @for $k from $steps/2 + 1 through $steps{
        
        $rotateZ: 0deg;//45deg;
        
        

        $x: sin( $stp * $k ) * $r;
        $z: cos( $stp * $k ) * $r;

        // @if $k % 2 == 0 {
        //     $rotateZ: 5deg;
        // }
        // @else {
        //     $rotateZ: 185deg;
        // }
        
        p:nth-child(#{$k}){

            transform: none;

            $angleY: ( $k * $stpd ) * 1deg;
            
            transform: translate3d($x, $translateY * 1vw, $z) rotateY( $angleY ) rotateZ( $rotateZ ) ;

            $color: nth( $gtac, floor( random(4) ) );
            
            &::before{
                background: $color;
            }
        }

        $translateY: $translateY + $incrementY;

    }   

}

@keyframes rotateGroups {
    0% { transform:  rotateY(0deg); }
    100% { transform: rotateY(360deg); }
}




@media (min-width: 992px){
    .top{
        display: block;
    }
    article{
        margin-top: 50px;
        margin-left: 50px;
        width: 45%;
        overflow: hidden;
        
        &>header{
            padding: 15px;
        }
    }

    .content{
        display: flex;
        flex-flow: row nowrap; 
        transition: all 500ms ease-in-out;

        &>section{
            padding: 15px;
            flex: 1 0 auto;
            transition: all 200ms;
        }
    }
    
    .jump-right,
    .jump-left{
        font-family: "Times New Roman", Times;
        display: inline-block;
        float:right;
        font-size: 20px;
        line-height: .5;
        font-style: italic;
        text-transform: uppercase;

        position: relative;
        cursor:pointer;

        &::after {
            content: "";
            display: block;
            width: 100%;
            height: 7px;
            background-color: rgba($default-color, 0.68);
            z-index: 1000;
            position: relative;
            left: .2em;
            transform-origin: 50% 100%;
            transition: all 200ms;
        }

        &:hover{
            &::after {
                transform: scaleY(2);
            }
        }
    }

    .jump-left{
        float:left;
    }

    input[type="radio"] + .nav-item{
        display: inline-block;
        .nav-item-description{
            display: inline-block;
        }
    }

    input[type="radio"]:nth-of-type(1):checked ~ article .content{
        transform: translate3d(0, 0, 0);
    }

    input[type="radio"]:nth-of-type(2):checked ~ article .content{
        transform: translate3d(-100%, 0, 0);
    }

    input[type="radio"]:nth-of-type(3):checked ~ article .content{
        transform: translate3d(-200%, 0, 0);
    }

    input[type="radio"]:nth-of-type(4):checked ~ article .content{
        transform: translate3d(-300%, 0, 0);
    }

    .scene{
        display: block;
    }
}

@media (min-width: 1280px){
    article{
        margin-top: 50px;
        margin-left: 50px;
        width: 35%;
        overflow: hidden;
        
        &>header{
            padding: 15px;
        }
    }
}
